type token =
  | BOOL of (Id.range*bool)
  | INT of (Id.range*int)
  | FLOAT of (Id.range*float)
  | NOT of (Id.range)
  | MINUS of (Id.range)
  | PLUS of (Id.range)
  | AST of (Id.range)
  | SLASH of (Id.range)
  | LSL of (Id.range)
  | LSR of (Id.range)
  | MINUS_DOT of (Id.range)
  | PLUS_DOT of (Id.range)
  | AST_DOT of (Id.range)
  | SLASH_DOT of (Id.range)
  | EQUAL of (Id.range)
  | LESS_GREATER of (Id.range)
  | LESS_EQUAL of (Id.range)
  | GREATER_EQUAL of (Id.range)
  | LESS of (Id.range)
  | GREATER of (Id.range)
  | IF of (Id.range)
  | THEN of (Id.range)
  | ELSE of (Id.range)
  | IDENT of (Id.range*Id.t)
  | LET of (Id.range)
  | IN of (Id.range)
  | REC of (Id.range)
  | COMMA of (Id.range)
  | ARRAY_CREATE of (Id.range)
  | DOT of (Id.range)
  | LESS_MINUS of (Id.range)
  | SEMICOLON of (Id.range)
  | LPAREN of (Id.range)
  | RPAREN of (Id.range)
  | EOF

val program :
  (Lexing.lexbuf  -> token) -> Lexing.lexbuf -> Syntax.t
