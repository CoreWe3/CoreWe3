type token =
  | BOOL of (Id.range*bool)
  | INT of (Id.range*int)
  | FLOAT of (Id.range*float)
  | NOT of (Id.range)
  | MINUS of (Id.range)
  | PLUS of (Id.range)
  | AST of (Id.range)
  | SLASH of (Id.range)
  | LSL of (Id.range)
  | LSR of (Id.range)
  | MINUS_DOT of (Id.range)
  | PLUS_DOT of (Id.range)
  | AST_DOT of (Id.range)
  | SLASH_DOT of (Id.range)
  | EQUAL of (Id.range)
  | LESS_GREATER of (Id.range)
  | LESS_EQUAL of (Id.range)
  | GREATER_EQUAL of (Id.range)
  | LESS of (Id.range)
  | GREATER of (Id.range)
  | IF of (Id.range)
  | THEN of (Id.range)
  | ELSE of (Id.range)
  | IDENT of (Id.range*Id.t)
  | LET of (Id.range)
  | IN of (Id.range)
  | REC of (Id.range)
  | COMMA of (Id.range)
  | ARRAY_CREATE of (Id.range)
  | DOT of (Id.range)
  | LESS_MINUS of (Id.range)
  | SEMICOLON of (Id.range)
  | LPAREN of (Id.range)
  | RPAREN of (Id.range)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* parserが利用する変数、関数、型などの定義 *)
open Syntax
let addtyp x = (x, Type.gentyp ())
let ex_range head tail ast = ((fst head, snd tail), ast)
# 46 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  260 (* NOT *);
  261 (* MINUS *);
  262 (* PLUS *);
  263 (* AST *);
  264 (* SLASH *);
  265 (* LSL *);
  266 (* LSR *);
  267 (* MINUS_DOT *);
  268 (* PLUS_DOT *);
  269 (* AST_DOT *);
  270 (* SLASH_DOT *);
  271 (* EQUAL *);
  272 (* LESS_GREATER *);
  273 (* LESS_EQUAL *);
  274 (* GREATER_EQUAL *);
  275 (* LESS *);
  276 (* GREATER *);
  277 (* IF *);
  278 (* THEN *);
  279 (* ELSE *);
  280 (* IDENT *);
  281 (* LET *);
  282 (* IN *);
  283 (* REC *);
  284 (* COMMA *);
  285 (* ARRAY_CREATE *);
  286 (* DOT *);
  287 (* LESS_MINUS *);
  288 (* SEMICOLON *);
  289 (* LPAREN *);
  290 (* RPAREN *);
    0|]

let yylhs = "\255\255\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\004\000\008\000\
\008\000\005\000\005\000\006\000\006\000\007\000\007\000\000\000"

let yylen = "\002\000\
\001\000\003\000\002\000\001\000\001\000\001\000\001\000\005\000\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\006\000\
\002\000\003\000\003\000\003\000\003\000\006\000\005\000\002\000\
\001\000\008\000\007\000\003\000\003\000\001\000\004\000\002\000\
\001\000\002\000\001\000\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\038\000\004\000\005\000\006\000\000\000\000\000\
\000\000\000\000\007\000\000\000\000\000\000\000\000\000\048\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\040\000\000\000\000\000\047\000\
\046\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\008\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\015\000\016\000\017\000\054\000\048\000\018\000\056\000\084\000"

let yysindex = "\004\000\
\161\003\000\000\000\000\000\000\000\000\000\000\161\003\161\003\
\161\003\161\003\000\000\241\254\064\255\173\255\066\004\000\000\
\233\254\236\254\064\255\064\255\064\255\190\003\254\254\251\254\
\252\254\030\255\000\000\208\255\161\003\161\003\161\003\161\003\
\161\003\161\003\161\003\161\003\161\003\161\003\161\003\161\003\
\161\003\161\003\161\003\161\003\161\003\161\003\248\254\064\255\
\246\254\161\003\161\003\161\003\000\255\002\255\255\254\228\254\
\249\254\248\254\000\000\179\255\179\255\001\255\001\255\064\255\
\064\255\179\255\179\255\001\255\001\255\157\004\157\004\157\004\
\157\004\157\004\157\004\128\004\066\004\248\254\161\003\128\004\
\223\003\000\004\000\255\014\255\161\003\006\255\031\255\041\255\
\161\003\092\003\161\003\161\003\000\000\161\003\066\004\000\000\
\000\000\161\003\126\003\033\255\099\004\066\004\066\004\033\004\
\000\000\161\003\161\003\099\004\066\004"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\061\000\000\000\
\035\000\171\000\201\000\231\000\005\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\069\000\039\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\103\000\000\000\026\002\060\002\141\001\175\001\073\001\
\107\001\094\002\128\002\222\001\252\001\150\002\170\002\196\002\
\216\002\243\002\017\003\192\001\035\003\137\000\000\000\223\002\
\000\000\000\000\047\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\053\003\000\000\
\000\000\000\000\000\000\001\000\033\003\055\003\042\255\000\000\
\000\000\000\000\000\000\040\003\062\003"

let yygindex = "\000\000\
\007\000\000\000\059\000\000\000\000\000\000\000\000\000\243\255"

let yytablesize = 1470
let yytable = "\087\000\
\008\000\004\000\005\000\006\000\001\000\088\000\049\000\050\000\
\023\000\033\000\034\000\024\000\052\000\019\000\020\000\021\000\
\022\000\025\000\053\000\055\000\028\000\057\000\079\000\083\000\
\011\000\089\000\086\000\085\000\094\000\096\000\004\000\005\000\
\006\000\014\000\009\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\011\000\097\000\098\000\
\080\000\081\000\082\000\057\000\001\000\041\000\014\000\106\000\
\004\000\005\000\006\000\039\000\043\000\093\000\000\000\026\000\
\000\000\047\000\000\000\000\000\000\000\047\000\047\000\047\000\
\047\000\000\000\000\000\000\000\058\000\090\000\047\000\011\000\
\000\000\000\000\000\000\095\000\000\000\000\000\000\000\099\000\
\014\000\101\000\102\000\000\000\103\000\000\000\037\000\000\000\
\104\000\000\000\078\000\000\000\000\000\000\000\000\000\000\000\
\108\000\109\000\000\000\000\000\000\000\000\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\042\000\000\000\047\000\047\000\047\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\047\000\000\000\000\000\000\000\
\000\000\047\000\000\000\000\000\000\000\047\000\000\000\047\000\
\047\000\047\000\047\000\000\000\000\000\000\000\047\000\047\000\
\000\000\000\000\033\000\000\000\003\000\004\000\005\000\006\000\
\007\000\008\000\000\000\004\000\005\000\006\000\000\000\009\000\
\000\000\031\000\032\000\033\000\034\000\000\000\000\000\037\000\
\038\000\010\000\000\000\000\000\011\000\012\000\000\000\000\000\
\010\000\013\000\011\000\000\000\000\000\014\000\027\000\000\000\
\004\000\005\000\006\000\014\000\029\000\030\000\031\000\032\000\
\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\000\000\000\000\011\000\011\000\
\000\000\000\000\000\000\045\000\000\000\000\000\000\000\046\000\
\014\000\059\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\000\008\000\008\000\025\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\000\000\008\000\008\000\
\008\000\000\000\008\000\000\000\008\000\000\000\008\000\000\000\
\008\000\008\000\008\000\009\000\009\000\009\000\032\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\000\000\
\009\000\009\000\009\000\000\000\009\000\000\000\009\000\000\000\
\000\000\000\000\009\000\009\000\009\000\043\000\043\000\043\000\
\016\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\000\000\043\000\043\000\043\000\000\000\043\000\000\000\
\043\000\000\000\000\000\000\000\043\000\043\000\043\000\037\000\
\037\000\037\000\017\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\000\000\037\000\037\000\037\000\000\000\
\037\000\000\000\037\000\000\000\000\000\000\000\037\000\037\000\
\037\000\042\000\042\000\042\000\014\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\000\000\042\000\042\000\
\042\000\000\000\042\000\000\000\042\000\000\000\000\000\000\000\
\042\000\042\000\042\000\033\000\033\000\033\000\015\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\045\000\
\033\000\033\000\033\000\000\000\033\000\000\000\000\000\000\000\
\000\000\000\000\033\000\033\000\033\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\028\000\010\000\010\000\
\000\000\000\000\010\000\000\000\010\000\000\000\000\000\000\000\
\010\000\000\000\010\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\029\000\011\000\011\000\000\000\000\000\
\011\000\000\000\011\000\000\000\000\000\000\000\011\000\000\000\
\011\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\013\000\025\000\025\000\000\000\000\000\025\000\000\000\
\025\000\000\000\000\000\000\000\025\000\000\000\025\000\000\000\
\000\000\000\000\000\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\012\000\032\000\032\000\000\000\000\000\
\032\000\000\000\032\000\000\000\000\000\000\000\032\000\000\000\
\032\000\000\000\000\000\000\000\000\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\027\000\016\000\016\000\
\000\000\000\000\016\000\000\000\016\000\000\000\000\000\000\000\
\016\000\000\000\016\000\000\000\000\000\000\000\000\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\026\000\
\017\000\017\000\000\000\000\000\017\000\000\000\017\000\000\000\
\000\000\000\000\017\000\000\000\017\000\000\000\000\000\000\000\
\000\000\014\000\014\000\014\000\014\000\018\000\000\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\000\000\014\000\014\000\000\000\000\000\014\000\000\000\
\014\000\019\000\000\000\000\000\014\000\000\000\014\000\000\000\
\000\000\000\000\000\000\015\000\015\000\015\000\015\000\000\000\
\000\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\022\000\015\000\015\000\000\000\000\000\
\015\000\000\000\015\000\000\000\000\000\000\000\015\000\000\000\
\015\000\000\000\000\000\000\000\000\000\045\000\045\000\023\000\
\000\000\045\000\000\000\045\000\000\000\000\000\044\000\045\000\
\000\000\045\000\028\000\028\000\028\000\028\000\000\000\000\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\020\000\028\000\028\000\000\000\000\000\028\000\
\000\000\028\000\000\000\000\000\000\000\028\000\000\000\028\000\
\029\000\029\000\029\000\029\000\000\000\000\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\021\000\029\000\029\000\000\000\000\000\029\000\000\000\029\000\
\000\000\000\000\000\000\029\000\000\000\029\000\013\000\013\000\
\024\000\000\000\036\000\000\000\013\000\013\000\000\000\035\000\
\013\000\013\000\013\000\013\000\013\000\013\000\000\000\013\000\
\013\000\000\000\000\000\013\000\031\000\013\000\030\000\000\000\
\000\000\013\000\000\000\013\000\000\000\034\000\000\000\000\000\
\012\000\012\000\000\000\000\000\000\000\000\000\012\000\012\000\
\000\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\
\000\000\012\000\012\000\000\000\000\000\012\000\000\000\012\000\
\000\000\000\000\000\000\012\000\000\000\012\000\000\000\000\000\
\000\000\000\000\027\000\027\000\000\000\000\000\000\000\000\000\
\027\000\027\000\000\000\000\000\027\000\027\000\027\000\027\000\
\027\000\027\000\000\000\027\000\027\000\000\000\000\000\027\000\
\000\000\027\000\000\000\000\000\000\000\027\000\000\000\027\000\
\000\000\000\000\000\000\000\000\026\000\026\000\000\000\000\000\
\000\000\000\000\026\000\026\000\000\000\000\000\026\000\026\000\
\026\000\026\000\026\000\026\000\000\000\026\000\026\000\000\000\
\000\000\026\000\000\000\026\000\000\000\000\000\000\000\026\000\
\000\000\026\000\000\000\000\000\018\000\018\000\018\000\018\000\
\018\000\018\000\000\000\018\000\018\000\000\000\000\000\018\000\
\000\000\018\000\000\000\000\000\000\000\018\000\000\000\018\000\
\019\000\019\000\019\000\019\000\019\000\019\000\000\000\019\000\
\019\000\000\000\000\000\019\000\000\000\019\000\000\000\000\000\
\000\000\019\000\000\000\019\000\000\000\000\000\000\000\000\000\
\000\000\000\000\022\000\022\000\022\000\022\000\022\000\022\000\
\000\000\022\000\022\000\000\000\000\000\022\000\000\000\022\000\
\000\000\000\000\000\000\022\000\000\000\022\000\023\000\023\000\
\023\000\023\000\023\000\023\000\000\000\023\000\023\000\000\000\
\000\000\023\000\000\000\023\000\044\000\044\000\000\000\023\000\
\044\000\023\000\044\000\000\000\000\000\000\000\044\000\000\000\
\044\000\020\000\020\000\020\000\020\000\020\000\020\000\000\000\
\020\000\020\000\000\000\000\000\020\000\000\000\020\000\000\000\
\000\000\000\000\020\000\000\000\020\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000\
\021\000\021\000\021\000\021\000\021\000\000\000\021\000\021\000\
\000\000\000\000\021\000\000\000\021\000\000\000\000\000\000\000\
\021\000\000\000\021\000\000\000\000\000\000\000\024\000\024\000\
\036\000\036\000\024\000\000\000\036\000\035\000\035\000\000\000\
\024\000\035\000\024\000\000\000\036\000\000\000\000\000\035\000\
\000\000\035\000\031\000\031\000\030\000\030\000\031\000\000\000\
\030\000\000\000\000\000\034\000\034\000\000\000\031\000\034\000\
\030\000\000\000\000\000\000\000\004\000\005\000\006\000\034\000\
\029\000\030\000\031\000\032\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\000\000\000\000\000\000\011\000\000\000\000\000\000\000\045\000\
\000\000\000\000\000\000\046\000\014\000\100\000\004\000\005\000\
\006\000\000\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\044\000\000\000\000\000\000\000\011\000\000\000\000\000\
\000\000\045\000\000\000\000\000\000\000\046\000\014\000\105\000\
\003\000\004\000\005\000\006\000\007\000\008\000\000\000\000\000\
\000\000\000\000\000\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\
\011\000\012\000\000\000\000\000\000\000\013\000\004\000\005\000\
\006\000\014\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\044\000\000\000\051\000\000\000\011\000\000\000\000\000\
\000\000\045\000\000\000\000\000\000\000\046\000\014\000\004\000\
\005\000\006\000\000\000\029\000\030\000\031\000\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\000\000\000\000\091\000\011\000\000\000\
\000\000\000\000\045\000\000\000\000\000\000\000\046\000\014\000\
\004\000\005\000\006\000\000\000\029\000\030\000\031\000\032\000\
\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\000\000\000\000\000\000\011\000\
\000\000\092\000\000\000\045\000\000\000\000\000\000\000\046\000\
\014\000\004\000\005\000\006\000\000\000\029\000\030\000\031\000\
\032\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\000\000\000\000\000\000\
\011\000\000\000\107\000\000\000\045\000\000\000\000\000\000\000\
\046\000\014\000\004\000\005\000\006\000\000\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\043\000\044\000\000\000\000\000\
\000\000\011\000\000\000\000\000\000\000\045\000\000\000\000\000\
\000\000\046\000\014\000\004\000\005\000\006\000\000\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\000\000\
\000\000\000\000\011\000\000\000\000\000\000\000\045\000\000\000\
\004\000\005\000\006\000\014\000\029\000\030\000\031\000\032\000\
\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\000\000\000\000\000\000\011\000\
\000\000\000\000\000\000\000\000\000\000\004\000\005\000\006\000\
\014\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\014\000"

let yycheck = "\028\001\
\000\000\001\001\002\001\003\001\001\000\034\001\030\001\028\001\
\024\001\009\001\010\001\027\001\015\001\007\000\008\000\009\000\
\010\000\033\001\024\001\024\001\014\000\030\001\033\001\024\001\
\024\001\033\001\028\001\026\001\015\001\024\001\001\001\002\001\
\003\001\033\001\000\000\029\000\030\000\031\000\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\024\001\024\001\015\001\
\050\000\051\000\052\000\030\001\000\000\015\001\033\001\031\001\
\001\001\002\001\003\001\026\001\000\000\083\000\255\255\013\000\
\255\255\015\000\255\255\255\255\255\255\019\000\020\000\021\000\
\022\000\255\255\255\255\255\255\026\000\079\000\028\000\024\001\
\255\255\255\255\255\255\085\000\255\255\255\255\255\255\089\000\
\033\001\091\000\092\000\255\255\094\000\255\255\000\000\255\255\
\098\000\255\255\048\000\255\255\255\255\255\255\255\255\255\255\
\106\000\107\000\255\255\255\255\255\255\255\255\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\000\000\255\255\080\000\081\000\082\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\090\000\255\255\255\255\255\255\
\255\255\095\000\255\255\255\255\255\255\099\000\255\255\101\000\
\102\000\103\000\104\000\255\255\255\255\255\255\108\000\109\000\
\255\255\255\255\000\000\255\255\000\001\001\001\002\001\003\001\
\004\001\005\001\255\255\001\001\002\001\003\001\255\255\011\001\
\255\255\007\001\008\001\009\001\010\001\255\255\255\255\013\001\
\014\001\021\001\255\255\255\255\024\001\025\001\255\255\255\255\
\000\000\029\001\024\001\255\255\255\255\033\001\034\001\255\255\
\001\001\002\001\003\001\033\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\000\000\024\001\
\255\255\255\255\255\255\028\001\255\255\255\255\255\255\032\001\
\033\001\034\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\000\000\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\023\001\
\024\001\255\255\026\001\255\255\028\001\255\255\030\001\255\255\
\032\001\033\001\034\001\001\001\002\001\003\001\000\000\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\022\001\023\001\024\001\255\255\026\001\255\255\028\001\255\255\
\255\255\255\255\032\001\033\001\034\001\001\001\002\001\003\001\
\000\000\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\022\001\023\001\024\001\255\255\026\001\255\255\
\028\001\255\255\255\255\255\255\032\001\033\001\034\001\001\001\
\002\001\003\001\000\000\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\022\001\023\001\024\001\255\255\
\026\001\255\255\028\001\255\255\255\255\255\255\032\001\033\001\
\034\001\001\001\002\001\003\001\000\000\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\023\001\
\024\001\255\255\026\001\255\255\028\001\255\255\255\255\255\255\
\032\001\033\001\034\001\001\001\002\001\003\001\000\000\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\000\000\
\022\001\023\001\024\001\255\255\026\001\255\255\255\255\255\255\
\255\255\255\255\032\001\033\001\034\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\000\000\022\001\023\001\
\255\255\255\255\026\001\255\255\028\001\255\255\255\255\255\255\
\032\001\255\255\034\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\000\000\022\001\023\001\255\255\255\255\
\026\001\255\255\028\001\255\255\255\255\255\255\032\001\255\255\
\034\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\000\000\022\001\023\001\255\255\255\255\026\001\255\255\
\028\001\255\255\255\255\255\255\032\001\255\255\034\001\255\255\
\255\255\255\255\255\255\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\000\000\022\001\023\001\255\255\255\255\
\026\001\255\255\028\001\255\255\255\255\255\255\032\001\255\255\
\034\001\255\255\255\255\255\255\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\000\000\022\001\023\001\
\255\255\255\255\026\001\255\255\028\001\255\255\255\255\255\255\
\032\001\255\255\034\001\255\255\255\255\255\255\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\000\000\
\022\001\023\001\255\255\255\255\026\001\255\255\028\001\255\255\
\255\255\255\255\032\001\255\255\034\001\255\255\255\255\255\255\
\255\255\005\001\006\001\007\001\008\001\000\000\255\255\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\022\001\023\001\255\255\255\255\026\001\255\255\
\028\001\000\000\255\255\255\255\032\001\255\255\034\001\255\255\
\255\255\255\255\255\255\005\001\006\001\007\001\008\001\255\255\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\000\000\022\001\023\001\255\255\255\255\
\026\001\255\255\028\001\255\255\255\255\255\255\032\001\255\255\
\034\001\255\255\255\255\255\255\255\255\022\001\023\001\000\000\
\255\255\026\001\255\255\028\001\255\255\255\255\000\000\032\001\
\255\255\034\001\005\001\006\001\007\001\008\001\255\255\255\255\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\000\000\022\001\023\001\255\255\255\255\026\001\
\255\255\028\001\255\255\255\255\255\255\032\001\255\255\034\001\
\005\001\006\001\007\001\008\001\255\255\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\000\000\022\001\023\001\255\255\255\255\026\001\255\255\028\001\
\255\255\255\255\255\255\032\001\255\255\034\001\005\001\006\001\
\000\000\255\255\000\000\255\255\011\001\012\001\255\255\000\000\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\022\001\
\023\001\255\255\255\255\026\001\000\000\028\001\000\000\255\255\
\255\255\032\001\255\255\034\001\255\255\000\000\255\255\255\255\
\005\001\006\001\255\255\255\255\255\255\255\255\011\001\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\022\001\023\001\255\255\255\255\026\001\255\255\028\001\
\255\255\255\255\255\255\032\001\255\255\034\001\255\255\255\255\
\255\255\255\255\005\001\006\001\255\255\255\255\255\255\255\255\
\011\001\012\001\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\023\001\255\255\255\255\026\001\
\255\255\028\001\255\255\255\255\255\255\032\001\255\255\034\001\
\255\255\255\255\255\255\255\255\005\001\006\001\255\255\255\255\
\255\255\255\255\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\022\001\023\001\255\255\
\255\255\026\001\255\255\028\001\255\255\255\255\255\255\032\001\
\255\255\034\001\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\023\001\255\255\255\255\026\001\
\255\255\028\001\255\255\255\255\255\255\032\001\255\255\034\001\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\022\001\
\023\001\255\255\255\255\026\001\255\255\028\001\255\255\255\255\
\255\255\032\001\255\255\034\001\255\255\255\255\255\255\255\255\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\022\001\023\001\255\255\255\255\026\001\255\255\028\001\
\255\255\255\255\255\255\032\001\255\255\034\001\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\022\001\023\001\255\255\
\255\255\026\001\255\255\028\001\022\001\023\001\255\255\032\001\
\026\001\034\001\028\001\255\255\255\255\255\255\032\001\255\255\
\034\001\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\022\001\023\001\255\255\255\255\026\001\255\255\028\001\255\255\
\255\255\255\255\032\001\255\255\034\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\023\001\
\255\255\255\255\026\001\255\255\028\001\255\255\255\255\255\255\
\032\001\255\255\034\001\255\255\255\255\255\255\022\001\023\001\
\022\001\023\001\026\001\255\255\026\001\022\001\023\001\255\255\
\032\001\026\001\034\001\255\255\034\001\255\255\255\255\032\001\
\255\255\034\001\022\001\023\001\022\001\023\001\026\001\255\255\
\026\001\255\255\255\255\022\001\023\001\255\255\034\001\026\001\
\034\001\255\255\255\255\255\255\001\001\002\001\003\001\034\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\255\255\024\001\255\255\255\255\255\255\028\001\
\255\255\255\255\255\255\032\001\033\001\034\001\001\001\002\001\
\003\001\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\255\255\024\001\255\255\255\255\
\255\255\028\001\255\255\255\255\255\255\032\001\033\001\034\001\
\000\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\255\255\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\255\255\255\255\
\024\001\025\001\255\255\255\255\255\255\029\001\001\001\002\001\
\003\001\033\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\255\255\024\001\255\255\255\255\
\255\255\028\001\255\255\255\255\255\255\032\001\033\001\001\001\
\002\001\003\001\255\255\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\023\001\024\001\255\255\
\255\255\255\255\028\001\255\255\255\255\255\255\032\001\033\001\
\001\001\002\001\003\001\255\255\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\255\255\024\001\
\255\255\026\001\255\255\028\001\255\255\255\255\255\255\032\001\
\033\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\255\255\
\024\001\255\255\026\001\255\255\028\001\255\255\255\255\255\255\
\032\001\033\001\001\001\002\001\003\001\255\255\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\255\255\
\255\255\024\001\255\255\255\255\255\255\028\001\255\255\255\255\
\255\255\032\001\033\001\001\001\002\001\003\001\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\255\255\255\255\024\001\255\255\255\255\255\255\028\001\255\255\
\001\001\002\001\003\001\033\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\255\255\024\001\
\255\255\255\255\255\255\255\255\255\255\001\001\002\001\003\001\
\033\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\033\001"

let yynames_const = "\
  EOF\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  NOT\000\
  MINUS\000\
  PLUS\000\
  AST\000\
  SLASH\000\
  LSL\000\
  LSR\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  IDENT\000\
  LET\000\
  IN\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 67 "parser.mly"
    ( 
      print_string "SyntaxTree =======================-\n";
      print_string (pp_t _1);
      _1)
# 582 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.range) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.range) in
    Obj.repr(
# 74 "parser.mly"
    ( ex_range _1 _3 (get_ast _2) )
# 591 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Id.range) in
    Obj.repr(
# 76 "parser.mly"
    ( ex_range _1 _2 Unit )
# 599 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.range*bool) in
    Obj.repr(
# 78 "parser.mly"
    ( ex_range (fst _1) (fst _1) (Bool (snd _1)) )
# 606 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.range*int) in
    Obj.repr(
# 80 "parser.mly"
    ( ex_range (fst _1) (fst _1) (Int (snd _1)) )
# 613 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.range*float) in
    Obj.repr(
# 82 "parser.mly"
    ( ex_range (fst _1) (fst _1) (Float (snd _1)) )
# 620 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.range*Id.t) in
    Obj.repr(
# 84 "parser.mly"
    ( ex_range (fst _1) (fst _1) (Var (snd _1)) )
# 627 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Id.range) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Id.range) in
    Obj.repr(
# 86 "parser.mly"
    ( ex_range (get_range _1) _5 (Get (_1, _4)) )
# 638 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 90 "parser.mly"
    ( _1 )
# 645 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 93 "parser.mly"
    ( ex_range _1 (get_range _2) (Not _2))
# 653 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 96 "parser.mly"
    ( match _2 with
    | (r, Float(f)) -> ex_range _1 r (Float (-.f)) (* -1.23などは型エラーではないので別扱い *)
    | (r, e) -> ex_range _1 r (Neg (_2)) )
# 663 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 100 "parser.mly"
    ( ex_range (get_range _1) (get_range _3) (Add (_1, _3)) )
# 672 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 102 "parser.mly"
    ( ex_range (get_range _1) (get_range _3) (Sub (_1, _3)) )
# 681 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 104 "parser.mly"
    ( ex_range (get_range _1) (get_range _3) (Mul (_1, _3)) )
# 690 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 106 "parser.mly"
    ( ex_range (get_range _1) (get_range _3) (Div (_1, _3)) )
# 699 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 108 "parser.mly"
    ( ex_range (get_range _1) (get_range _3) (Lsl (_1, _3)) )
# 708 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 110 "parser.mly"
    ( ex_range (get_range _1) (get_range _3) (Lsr (_1, _3)) )
# 717 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 112 "parser.mly"
    ( ex_range (get_range _1) (get_range _3) (Eq (_1, _3)) )
# 726 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 114 "parser.mly"
    ( let head = (get_range _1) in
      let tail = (get_range _3) in
      let inner = ex_range head tail (Eq (_1, _3)) in
      ex_range head tail (Not inner) )
# 738 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 119 "parser.mly"
    ( let head = (get_range _1) in
      let tail = (get_range _3) in
      let inner = ex_range head tail (LE (_3, _1)) in
      ex_range head tail (Not inner) )
# 750 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 124 "parser.mly"
    ( let head = (get_range _1) in
      let tail = (get_range _3) in
      let inner = ex_range head tail (LE (_1, _3)) in
      ex_range head tail (Not inner) )
# 762 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 129 "parser.mly"
    ( ex_range (get_range _1) (get_range _3) (LE (_1, _3)) )
# 771 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 131 "parser.mly"
    ( ex_range (get_range _1) (get_range _3) (LE (_3, _1)) )
# 780 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Id.range) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Id.range) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 134 "parser.mly"
    ( ex_range _1 (get_range _6) (If (_2, _4, _6)) )
# 792 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 137 "parser.mly"
    ( ex_range _1 (get_range _2) (FNeg (_2)) )
# 800 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 139 "parser.mly"
    ( ex_range (get_range _1) (get_range _3) (FAdd (_1, _3)) )
# 809 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 141 "parser.mly"
    ( ex_range (get_range _1) (get_range _3) (FSub (_1, _3)) )
# 818 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 143 "parser.mly"
    ( ex_range (get_range _1) (get_range _3) (FMul (_1, _3)) )
# 827 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 145 "parser.mly"
    ( ex_range (get_range _1) (get_range _3) (FDiv (_1, _3)) )
# 836 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Id.range) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.range*Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Id.range) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 148 "parser.mly"
    ( ex_range _1 (get_range _6) (Let (addtyp (snd _2), _4, _6)) )
# 848 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Id.range) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 151 "parser.mly"
    ( ex_range _1 (get_range _5) (LetRec (_3, _5)) )
# 859 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 154 "parser.mly"
    ( let tail = get_range (List.hd (List.rev _2)) in
      ex_range (get_range _1) tail (App (_1, _2)) )
# 868 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 157 "parser.mly"
    ( let head = get_range (List.hd _1) in
      let tail = get_range (List.hd (List.rev _1)) in
      ex_range head tail (Tuple _1) )
# 877 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Id.range) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Id.range) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Id.range) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 161 "parser.mly"
    ( ex_range _1 (get_range _8) (LetTuple(_3, _6, _8)) )
# 891 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Id.range) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Id.range) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 163 "parser.mly"
    ( ex_range (get_range _1) (get_range _7) (Put(_1, _4, _7)) )
# 904 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 165 "parser.mly"
    ( ex_range (get_range _1) (get_range _1) (Let((Id.gentmp Type.Unit, Type.Unit), _1, _3)) )
# 913 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.range) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 168 "parser.mly"
    ( ex_range _1 (get_range _3) (Array(_2, _3)) )
# 922 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 170 "parser.mly"
    ( failwith
	(Printf.sprintf "parse error near characters %d-%d"
	   (Parsing.symbol_start ())
	   (Parsing.symbol_end ())) )
# 931 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.range*Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 177 "parser.mly"
    ( { name = addtyp (snd _1); args = _2; body = _4 } )
# 941 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.range*Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 181 "parser.mly"
    ( addtyp (snd _1) :: _2 )
# 949 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.range*Id.t) in
    Obj.repr(
# 183 "parser.mly"
    ( [addtyp (snd _1)] )
# 956 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 188 "parser.mly"
    ( _1 @ [_2] )
# 964 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 191 "parser.mly"
    ( [_1] )
# 971 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 195 "parser.mly"
    ( _1 @ [_3] )
# 980 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 197 "parser.mly"
    ( [_1; _3] )
# 989 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.range*Id.t) in
    Obj.repr(
# 201 "parser.mly"
    ( _1 @ [addtyp (snd _3)] )
# 998 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.range*Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Id.range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.range*Id.t) in
    Obj.repr(
# 203 "parser.mly"
    ( [addtyp (snd _1); addtyp (snd _3)] )
# 1007 "parser.ml"
               : 'pat))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
