<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=ascii">
<link rel=Edit-Time-Data href="./tutorial-mincaml.files/editdata.mso">
<link rel="stylesheet" href="sh.css" type="text/css">
<title>A Crash Course for the MinCaml Compiler</title>
</head>
<body bgcolor="#FFFFFF" link=blue vlink=purple class="Normal">
<div>
  <h3>K-Normalization (<tt>kNormal.ml</tt>)</h3>
  <p>We stated that &quot;compilation is about bridging the gaps between a high-level language and a low-level language,&quot; one of which was &quot;nested expressions.&quot; For example, ML (as well as most languages) can compute at once the values of expressions like <tt>a + b + c - d</tt>, but ordinary assembly does not have such an instruction.</p>
  <p>This gap is bridged by a translation called <em>K-normalization</em>, which defines every intermediate result of computation as a variable. (The name K-normalization originates in a compiler called <a target="_blank"
href="http://www.it-c.dk/research/mlkit/">ML Kit</a>.) For example, the previous expression can be translated to:</p>
  <p><tt>let tmp1 = a + b in<br>
    let tmp2 = tmp1 + c in<br>
    tmp2 - d</tt></p>
  <p>In MinCaml, <a target="srcview" href="min-caml.html#knormal_g"><tt>KNormal.g</tt></a> is the core of K-normalization and <a target="srcview"
href="min-caml.html#knormal_t"><tt>KNormal.t</tt></a> is the data type of K-normalized expressions (called <em>K-normal forms</em>). <tt>KNormal.g</tt> takes  an expression before K-normalization with type environment <tt>env</tt>, and returns the expression after K-normalization paired with its type. (Types are passed around just for annotating variable definitions in <tt>let</tt>, and are not central to the essence of K-normalization.)</p>
  <p>For example, in the case of <a target="srcview"
href="min-caml.html#knormal_add"><tt>e1 + e2</tt></a>, <tt>e1</tt> is first K-normalized by <tt>g env e1</tt>, whose result is bound by <tt>let</tt> to variable <tt>x</tt>. Then, <tt>e2</tt> is also K-normalized by <tt>g env e2</tt>, whose result is bound by <tt>let</tt> to variable <tt>y</tt>, and the expression <tt>x + y</tt> is returned with its type <tt>int</tt>.</p>
  <p>In order to insert such <tt>let</tt>, we use an auxiliary function named <a target="srcview"
href="min-caml.html#knormal_insert"><tt>insert_let</tt></a>. It takes expression <tt>e</tt>, creates a fresh variable x, and returns the expression <tt>let x = e in </tt>... (though, if <tt>e</tt> is a variable in the first place, <tt>insert_let</tt> uses this variable as <tt>x</tt> and does not insert <tt>let</tt> in fact). It also  takes the &quot;continuation&quot; function <tt>k</tt>, apply it to <tt>x</tt>, and uses its result for the expression after <tt>in</tt> (the body &quot;...&quot; above).</p>
  <p>By the way, in addition to K-normalization, <tt>KNormal.g</tt> also <a target="srcview"
href="min-caml.html#knormal_bool">translates</a> booleans <tt>true</tt> and <tt>false</tt> to integers <tt>1</tt> and <tt>0</tt>. In addition, comparisons and conditional branches are translated into combined forms like <tt>if e1 &lt;= e2 then e3 else e4</tt> from separate forms such as <tt>e1 &lt;= e2</tt> and <tt>if e then e1 else e2</tt>. This translation bridges one of the gaps between MinCaml and ordinary assembly where comparison and branches are combined. If condition <tt>e</tt> is not a comparison, it is <a target="srcview"
href="min-caml.html#knormal_if">translated</a> into a comparison as in <tt>if e &lt;&gt; 0 then e1 else e2</tt>. Also by <a target="srcview"
href="min-caml.html#knormal_not">translating</a> <tt>if (not e) then e1 else e2</tt> to <tt>if e then e2 else e1</tt> etc., all boolean expressions and conditional branches end up in either of the two forms </p>
  <p align=center style='text-align:center'><tt>if e1 = e2 then e3 else e4</tt></p>
  <p>and</p>
  <p align=center style='text-align:center'><tt>if e1 &lt;= e2 then e3 else e4</tt>.</p>
  <p>This translation is different from K-normalization, but implemented together with <tt>KNormal.g</tt> just because separating them requires extra work to define the intermediate data type.</p>
  <p>In addition, uses of external variables are limited to calls to external functions (<a target="srcview"
href="min-caml.html#knormal_extfunapp"><tt>KNormal.ExtFunApp</tt></a>) or references to external arrays (<a target="srcview"
href="min-caml.html#knormal_extarray"><tt>KNormal.ExtArray</tt></a>) because they are necessary and sufficient for most applications. This restriction is also implemented together with K-normalization.</p>
  <p><a
href="tutorial-mincaml-10.eng.htm">Next</a></p>
</div>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-1484933-2";
urchinTracker();
</script>
</body>
</html>
