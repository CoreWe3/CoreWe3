<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=ascii">
<link rel=Edit-Time-Data href="./tutorial-mincaml.files/editdata.mso">
<link rel="stylesheet" href="sh.css" type="text/css">
<title>A Crash Course for the MinCaml Compiler</title>
</head>
<body bgcolor="#FFFFFF" link=blue vlink=purple class="Normal">
<div>
  <h3>The Makefile of MinCaml Compiler</h3>
  <p>Once you have <a target="_blank" href="https://sourceforge.net/projects/min-caml/">downloaded</a> the MinCaml compiler, please take a look at its <a target="srcview" href="Makefile" charset="euc-jp"><tt>Makefile</tt></a>. It describes how to compile MinCaml itself.</p>
  <p>The <tt>Makefile</tt> of MinCaml uses a convenient tool called <a target="_blank"
href="http://www.ocaml.info/home/ocaml_sources.html#ocaml-make"><tt>OCamlMakefile</tt></a> (the line <tt>include OCamlMakefile</tt> on the bottom). Just by listing the files needed for MinCaml in the line <tt>SOURCES = </tt>..., you can generate the byte-code executable <tt>min-caml</tt> by running the command &quot;<tt>make byte-code</tt>&quot;. Similarly, you can get the native-code <tt>min-caml.opt</tt> by &quot;<tt>make native-code</tt>&quot;. Furthermore, &quot;<tt>make top</tt>&quot; creates an OCaml top-level interactive environment <tt>min-caml.top</tt> where the modules of MinCaml are loaded by default. It is convenient for debugging and experiments.</p>
  <p>MinCaml's <tt>Makefile</tt> also has the functionality of automatic testing. Put ML code &quot;program-name<tt>.ml</tt>&quot; under directory <tt>test</tt>, write the program name at the line <tt>TESTS = </tt>..., and run &quot;<tt>make do_test</tt>&quot;. Then, the OCaml-produced result (program-name<tt>.ans</tt>) and the result (program-name<tt>.res</tt>) of MinCaml-generated assembly (program-name<tt>.s</tt>) are automatically compared, and their difference is output to &quot;program-name<tt>.cmp</tt>&quot;. Usually, it is empty because there should be no difference as long as the compilation and execution have succeeded.</p>
  <p>You need a SPARC environment with the compiler <tt>gcc</tt> and assembler <tt>as</tt> to execute the compiled program. However, it is <em>not</em> necessary for just <em>generating</em> the SPARC assembly.</p>
  <p><a
href="tutorial-mincaml-3.eng.htm">Next</a></p>
</div>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-1484933-2";
urchinTracker();
</script>
</body>
</html>
