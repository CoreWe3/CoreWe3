<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=ascii">
<link rel=Edit-Time-Data href="./tutorial-mincaml.files/editdata.mso">
<link rel="stylesheet" href="sh.css" type="text/css">
<title>A Crash Course for the MinCaml Compiler</title>
</head>
<body bgcolor="#FFFFFF" link=blue vlink=purple class="Normal">
<div>
  <h3>Reduction of Nested <tt>let</tt> (<tt>assoc.ml</tt>)</h3>
  <p>Next, for the purpose of improving the appearance of expressions, we flatten nested <tt>let</tt> from <tt>let x = (let y = e1 in e2) in e3</tt> to <tt>let y = e1 in let x = e2 in e3</tt>. This &quot;reduction&quot; does not (directly) affect the efficiency of programs compiled by MinCaml, but makes it easier for you to understand the intermediate code in debugging and experiments.</p>
  <p>This transformation is implemented by <a target="srcview"
href="min-caml.html#assoc_f"><tt>Assoc.f</tt></a>. For expressions of the form <a target="srcview"
href="min-caml.html#assoc_let"><tt>let x = e1 in e2</tt></a>, we first reduce <tt>e1</tt> to <tt>e1'</tt> and <tt>e2</tt> to <tt>e2'</tt> by recursion. Then, if <tt>e1'</tt> is like <tt>let </tt>...<tt> in e</tt>, we return the expression <tt>let </tt>...<tt> in let x = e in e2'</tt>. The implementation is a little tricky but simple once it is finished. (<tt>assoc.ml</tt> is only 21 lines.)</p>
  <p><a
href="tutorial-mincaml-13.eng.htm">Next</a></p>
</div>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-1484933-2";
urchinTracker();
</script>
</body>
</html>
