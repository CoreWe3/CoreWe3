<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=ascii">
<link rel=Edit-Time-Data href="./tutorial-mincaml.files/editdata.mso">
<link rel="stylesheet" href="sh.css" type="text/css">
<title>A Crash Course for the MinCaml Compiler</title>
</head>
<body bgcolor="#FFFFFF" link=blue vlink=purple class="Normal">
<div>
  <h3>Virtual Machine Code Generation (<tt>virtual.ml</tt>)</h3>
  <p>After closure conversion, we will generate SPARC assembly. However, since it is too hard to generate the real SPARC assembly with no preparation, we first generate some virtual machine code similar to SPARC assembly. Its main &quot;virtual&quot; aspects are:</p>
  <ul>
    <li>Infinite number of variables (instead of finite number of registers)</li>
    <li>If-then-else expressions and function calls instead of branches and jumps</li>
  </ul>
  <p>This virtual assembly is defined in <tt>sparcAsm.ml</tt>. <a target="srcview"
href="min-caml.html#sparcasm_exp"><tt>SparcAsm.exp</tt></a> corresponds to each instruction of SPARC (except <tt>if</tt>). Instruction sequence <a target="srcview"
href="min-caml.html#sparcasm_t"><tt>SparcAsm.t</tt></a> is either <tt>Ans</tt>, which returns a value at the end of a function, or variable definition <tt>Let</tt>. The other instructions <tt>Forget</tt>, <tt>Save</tt>, and <tt>Restore</tt> will be explained later.</p>
  <p><tt>Virtual.f</tt>, <tt>Virtual.h</tt>, and <tt>Virtual.g</tt> are the three functions that translate closure-converted programs to virtual machine code. <a target="srcview"
href="min-caml.html#virtual_f"><tt>Virtual.f</tt></a> translates the whole program (the list of top-level functions and the expression of main routine), <a target="srcview"
href="min-caml.html#virtual_h"><tt>Virtual.h</tt></a> translates each top-level function, and <a target="srcview"
href="min-caml.html#virtual_g"><tt>Virtual.g</tt></a> translates an expression. The point of these translations is to make explicit the memory accesses for creating, reading from, and writing to closures, tuples, and arrays. Data structures such as closures, tuples, and arrays are allocated in a memory region called the <em>heap</em>, whose address is remembered in special register <tt>SparcAsm.reg_hp</tt>.</p>
  <p>For example, in the case of array read <a target="srcview"
href="min-caml.html#virtual_get"><tt>Closure.Get</tt></a>, the offset is shifted according to the size of the element to be loaded. In tuple creation <a target="srcview"
href="min-caml.html#virtual_tuple"><tt>Closure.Tuple</tt></a>, each element is stored with floating-point numbers aligned (8-byte), and the starting address is used as the tuple's value. Closure creation <a target="srcview"
href="min-caml.html#virtual_makecls"><tt>Closure.MakeCls</tt></a> stores the address (label) of the function's body with the values of its free variables, also taking care of alignment, and uses the starting address as the closure's value. Accordingly, at the beginning of each <a href="min-caml.html#virtual_h" target="srcview">top-level function</a>, we load the values of free variables from the closure. In this process, we assume that every function closure-based application (<tt>AppCls</tt>) sets the closure's address to register <tt>SparcAsm.reg_cl</tt>.</p>
  <p>By the way, since SPARC assembly does not support floating-point immediates, we need to create a constant table on memory. For this purpose, <a target="srcview"
href="min-caml.html#virtual_g">Virtual.g</a> records floating-point constants to global variable <a target="srcview" href="min-caml.html#virtual_data">Virtual.data</a>, which are incorporated by <a target="srcview"
href="min-caml.html#virtual_f">Virtual.f</a> into the whole program <a target="srcview"
href="min-caml.html#sparcasm_prog">SparcAsm.Prog</a>.</p>
  <p><a
href="tutorial-mincaml-18.eng.htm">Next</a></p>
</div>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-1484933-2";
urchinTracker();
</script>
</body>
</html>
